/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    tapping-term-ms = <400>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        typing {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | L SHIFT | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
&kp GRAVE               &kp Q           &kp W       &kp E    &kp R  &kp T                                                                               &kp Y    &kp U             &kp I            &kp O                        &kp P  &kp BSLH
  &kp ESC  &ht_tp LEFT_CONTROL A  &ht_tp LEFT_ALT S  &ht_tp LCMD D    &kp F  &kp G                                                                               &kp H    &kp J  &ht_tp RIGHT_META K  &ht_tp RIGHT_ALT L  &ht_tp RIGHT_CONTROL SEMICOLON   &kp SQT
&kp LCTRL               &kp Z           &kp X       &kp C    &kp V  &kp B  &lt 1 PRINTSCREEN   &bt BT_NXT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET          &kp N    &kp M         &kp COMMA          &kp DOT                     &kp FSLH  &kp RGUI
                                                 &kp LGUI  &kp DEL  &mo 3     &kp LEFT_SHIFT  &lt 2 POUND           &kp RET          &kp SPACE  &kp BACKSPACE  &kp TAB          &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        numpad {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans
                        &trans  &trans  &trans  &caps_word  &trans  &trans  &trans  &trans        &trans        &trans
            >;
        };

        Function {
            bindings = <
&trans  &kp F1  &kp F2        &kp F3        &kp F4      &kp F5                                      &kp F6        &kp F7        &kp F8        &kp F9  &kp F10   &trans
&trans  &trans  &trans  &kp C_VOL_UP  &kp C_VOL_DN  &kp C_MUTE                                    &kp LEFT      &kp DOWN        &kp UP     &kp RIGHT  &kp F11  &kp F12
&trans  &trans  &trans  &kp C_BRI_UP  &kp C_BRI_DN      &trans  &trans  &trans  &trans  &trans  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &trans   &trans
                              &trans        &trans      &trans  &trans  &trans  &trans  &trans      &trans        &trans        &trans
            >;
        };

        symbols {
            bindings = <
&trans  &kp EXCLAMATION          &kp AT      &kp HASH    &kp DOLLAR   &kp PERCENT                                         &kp CARET      &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans     &kp NUMBER_1    &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                                      &kp NUMBER_6       &kp NUMBER_7  &kp NUMBER_8          &kp NUMBER_9           &kp NUMBER_0  &trans
&trans           &trans  &kp UNDERSCORE     &kp EQUAL        &trans        &trans  &trans  &trans  &trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp MINUS              &kp PLUS                 &trans  &trans
                                               &trans        &trans        &trans  &trans  &trans  &trans  &trans            &trans             &trans        &trans
            >;
        };
    };
};
